#!/usr/bin/env python

#
# ################################################################
#
# ProActive Parallel Suite(TM): The Java(TM) library for
#    Parallel, Distributed, Multi-Core Computing for
#    Enterprise Grids & Clouds
#
# Copyright (C) 1997-2011 INRIA/University of
#                 Nice-Sophia Antipolis/ActiveEon
# Contact: proactive@ow2.org or contact@activeeon.com
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation; version 3 of
# the License.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA
#
# If needed, contact us to obtain a release under GPL Version 2 or 3
# or a different license than the AGPL.
#
#  Initial developer(s):               The ActiveEon Team
#                        http://www.activeeon.com/
#  Contributor(s):
#
# ################################################################ 
# $$ACTIVEEON_CONTRIBUTOR$$
#

# author : philippe Gouttefarde

import os
import gtk
from gtk import gdk
import time
import commands
import signal
import sys

#Main class for screensaver
#
#Get back screensaver window anid and draw on picture generated by java application

class GsThemeWindow(gtk.Window):
    __gtype_name__ = 'GsThemeWindow'

    #picture to load
    image_file = '/tmp/ScreenSaver.bmp'
    
    #image where image_file will be draw
    image = gtk.Image()

    #last picture loading timestamp
    lastTime = 0


    #initialize the xwindow to receive image
    def do_realize(self):
        anid = self.anid()
        if anid:
            self.window = gdk.window_foreign_new(anid)
            self.window.set_events(gdk.EXPOSURE_MASK | gdk.STRUCTURE_MASK)
        else:
            self.window = gdk.Window(
                self.get_parent_window(),
                width=self.allocation.width,
                height=self.allocation.height,
                window_type=gdk.WINDOW_TOPLEVEL,
                wclass=gdk.INPUT_OUTPUT,
                event_mask=self.get_events() | gdk.EXPOSURE_MASK)

        self.window.set_user_data(self)
        x, y, self.w, self.h, depth = self.window.get_geometry()
        self.size_allocate(gdk.Rectangle(x=x, y=y, width=self.w, height=self.h))
        self.set_default_size(self.w, self.h)
	
        self.set_flags(self.flags() | gtk.REALIZED)
        self.set_decorated(False)
        self.style.attach(self.window)
        self.style.set_background(self.window, gtk.STATE_NORMAL)
        self.modify_bg(gtk.STATE_NORMAL, gdk.color_parse("black"))

        self.add(self.image)

    #a picture load on image
    def anim(self):

        #check existing of file
		while not os.path.exists(self.image_file):
			print 'waiting for : ' + self.image_file
			time.sleep( 0.5 ) 

        #switch image object
		self.remove(self.image)
		image = gtk.Image()
		self.add(image)
		image.show()

		#check change on picture file
		lastTime = os.stat(self.image_file)[8]
		while lastTime <= self.lastTime:
			if os.path.exists(self.image_file):	
				lastTime = os.stat(self.image_file)[8]
		
			time.sleep( 0.5 ) 
	
		#update data
		self.lastTime = lastTime
		image.set_from_file( self.image_file )

        #draw picture
		self.image = image
		self.show_all()



	#get back window anid
    def anid(self):

		id = os.environ.get('XSCREENSAVER_WINDOW')
		return int(id,16) if id else None



# FORMAT MESSAGE : [START/STOP] [X] [Y]

MAIN_DIR = '/usr/bin/proactive'

start = 'START'
stop = 'STOP'

#log path of proxy
config_file = 'log/proxy.txt'

#named pipe path
pipe_path = "/tmp/ss.pipe"

# log method
def writeLOG(txt):
    f = open( MAIN_DIR + "/" + config_file ,'a')
    f.write( txt )
    f.close()

def handler(signal, stackframe):

	pipe = open(pipe_path, 'w')
	
	pipe.write(stop)		
	pipe.close()
	
	#writeLOG(time.ctime() + "proxy has send : " + stop + "\n")
	print "screensaver has send : " + stop
	sys.exit()

def init():

	screen = commands.getoutput("xrandr | grep \* | tr -s ' ' | cut -d' ' -f2")
	screen_res = screen.split('x')
    
    #Screensize	
	length = screen_res[0]
	width = screen_res[1]

	data = start + " " + length + " " + width
            
	pipe = open(pipe_path, 'w')
	    
	pipe.write(data)		
	pipe.close()

	#writeLOG(time.ctime() + "proxy has send : " + data + "\n")
	print "screensaver has send : " + data

if __name__ == "__main__":

	#ready to send a stop to the server
	signal.signal(signal.SIGTERM, handler)

	#send start signal to the server
	init()

	window = GsThemeWindow()
	window.show()
    
	while True:
         
		window.anim() 
		gtk.main_iteration()
        

